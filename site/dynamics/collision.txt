\field{力学}
\title{２物体の衝突}
\comment{ここはそれほど面白いことはないと思うよ。}
\prev{energy}
\next{compare}
\create{2000/8/5}
\modify{2004/9/27}


\section{}

　これまで見てきた運動量保存則とエネルギー保存則を使えば、
2 つの物体が衝突した後でそれぞれの速度がどうなるかを計算することが出来る。

<P>

　物体 A （質量$ m\sub{A} $）の衝突前と後の速度をそれぞれ$ v\sub{A} $、$ v'\sub{A} $、<br>
　物体 B （質量$ m\sub{B} $）の衝突前と後の速度をそれぞれ$ v\sub{B} $、$ v'\sub{B} $とすると、

<P>

　運動量保存則より、

<tex>
m\sub{A} v\sub{A} + m\sub{B} v\sub{B} = m\sub{A} v'\sub{A} + m\sub{B} v'\sub{B} \tag{1}
</tex>

　エネルギー保存則より、

<tex>
\frac{1}{2} m\sub{A} v\sub{A}^2 + \frac{1}{2} m\sub{B} v\sub{B}^2
\ =\ \frac{1}{2} m\sub{A} {v'\sub{A}}^2 + \frac{1}{2} m\sub{B} {v'\sub{B}}^2 \tag{2}
</tex>

の 2 つの条件式が作れる。

<P>

　これを解けばいいのだが、計算が面倒くさい。
　難しくはないが面倒なのだ。
　そこで、もっと簡単に計算できる方法がある。

<P>

　エネルギー保存法則を使うのをやめて、相対速度からの条件を使えばいい。
　エネルギーが保存する時、衝突前の 2 物体の相対速度は衝突後の相対速度と同じになる。
　このような衝突を「\red{弾性衝突}」という。

<tex>
v'\sub{A} - v'\sub{B} \ =\ - (v\sub{A} - v\sub{B}) \tag{3}
</tex>

　(1) 式と (3) 式の連立方程式を解けば、簡単に衝突後の速度が求められる。

% ===================================================================

\section{余談だが・・・}

　エネルギー保存則からの条件 (2) の方を使ってコツコツと解いた場合、
2 通りの解が得られる。
　それは、衝突をしないで通りすぎる場合
（それでも運動量とエネルギーは変わらないので 2 つの条件を満たす解として正しい）
の解と、衝突した結果の解である。

<P>

　相対速度の条件 (3) 式を使った場合には解は 1 つしか求まらないが、
もう 1 つの解が欲しければ、次のような衝突しなかった場合の相対速度の条件を
使って解けばよい。

<tex>
v'\sub{A} - v'\sub{B} \ =\ v\sub{A} - v\sub{B} \tag{4}
</tex>

　ここで (3) 式と (4) 式の 2 つの条件を合わせれば、

<tex>
( v'\sub{A} - v'\sub{B} )^2 \ =\ ( v\sub{A} - v\sub{B} )^2 \tag{5}
</tex>

と書けるのであるが、この条件式 (5) と
エネルギー保存則からの条件式 (2) とは形が全く違うのに
どうして同じ解が得られる事になるのか、
なるほどと一目で納得できるようなエレガントな証明が出来なくてちょっと胸につかえている。


% ===================================================================

\section{ゲームに使う場合}

　キャラクタゲームなどでは、現実的な動きをさせるより
感性に頼って作った方が逆に本物らしく見えるものだが、
最近は妙に映像がリアルなものが流行りで、
動きも現実的なものが求められることが多くなってきた。

<P>

　これから書くことは「ゲームで衝突を計算したいけどどうも計算は苦手だよ」という人に
参考にしてもらいたい。

<P>
　運動量保存の法則<br>

<center>
mv + MV = mv' + MV'
</center>

<P>

と、衝突後の相対速度の関係式<br>

<center>
v' - V' = - elast * ( v - V ) 
</center>

<P>

を連立させて解けばよい。

<P>

　ここで、elast は「跳ね返り係数」で、 elast = 1 なら弾性衝突。
　elast = 0 なら二つはべったりとくっついてしまうことになる。
　elast = 0.5 などに設定すれば、ゴムボールやスポンジボールのような跳ね返りを
表現できる。

<P>

　連立式を解いた結果は下のようになる。
　そのまま使える形で書いておいた。
　たいしたものではないので自由に持っていってもらって構わない。

<P>
<center>
*******************************************
</center>
<P>

<pre>
float mass1, mass2;		// 質量
float newV1, newV2;		// 衝突後の速度
float v1, v2;			// 衝突前の速度
float elast = 1.0f;		// 弾性係数

newV1 = ( ( mass1 - mass2 * elast ) * v1 + ( mass2 + mass2 * elast ) * v2  )
                                                           / ( mass1 + mass2 );
newV2 = ( ( mass2 - mass1 * elast ) * v2 + ( mass1 + mass1 * elast ) * v1  )
                                                           / ( mass1 + mass2 );
</pre>

<P>

\section{式の改良}

　掲示板で「Jei」さんから、もっと効率のいい方法がありますよ、という指摘を頂いた。
　許可を得て、ここで紹介させてもらうことにする。

<P>

<center>
*******************************************
</center>

<P>

<pre>
float mass1, mass2;		// 質量
float newV1, newV2;		// 衝突後の速度
float v1, v2;			// 衝突前の速度
float elast = 1.0f;		// 弾性係数

newV1 = ( -v1 + v2 )*( 1 + elast )/( mass1/mass2 + 1 ) + v1;
newV2 = ( -v2 + v1 )*( 1 + elast )/( mass2/mass1 + 1 ) + v2;

</pre>

<center>
*******************************************
</center>

<P>

　見ただけで以前より効率が良さそうだと分かるが、実際に
<P>
<center>
A = ( 1 + elast )/( mass1/mass2 + 1 )
</center>
<P>

の部分を予め計算しておくことで、

<P>
<center>
newV1 = ( -v1 + v2 ) * A + v1;
</center>
<P>

のように毎回、1 回の掛け算、2 回の加算だけで次のターンでの速度が求められることになる。

<P>

　証明は以下の通り。
　分かり易くなるように記号を簡単にしてある。

<P>

<pre>
new_v = { (m - M*elast) * v + (M + M*elast) * V } / (m + M)
      = { (m - M*elast) * v + (M + M*elast) * V } / (m + M)              + v - v
      = { (m - M*elast -[m + M] ) * v + (M + M*elast) * V } / (m + M)    + v
      = { ( -M*elast - M ) * v + (M + M*elast) * V } / (m + M)           + v
      = { -( M*elast + M ) * v + (M + M*elast) * V } / (m + M)           + v
      = (-v + V) * (M + M*elast) / (m + M)       + v
      = (-v + V) * (1 + elast) / (m/M + 1)       + v
</pre>


<P>

　ちなみに、

<P>
<center>
newV1 - v1 = ( -v1 + v2 ) * A
</center>
<P>

であるから、衝突前後の速度差も簡単に求められ（ 1 回の掛け算、1 回の加算で済む）、
どれだけの力を受けたかも容易に把握できる、とのことです。
　お見事！

