\field{物理数学}
\title{ラゲールの微分方程式}
\comment{水素原子の動径波動関数を表すときに利用する。}
\prev{differential20}
\next{differential21}
\create{2022/2/25 11:50}
\modify{}

\section{概要説明}

　次の形の微分方程式を「\red{ラゲールの微分方程式}」と呼ぶ。

<tex>
x \, y'' \ +\ (1-x) \, y' \ +\ n \, y \ =\ 0 \tag{1}
</tex>

　$ n $が非負の整数のときには有限次の多項式の形の解を持つことが分かっている。
それを「\red{ラゲールの多項式}」と呼び、$ L_n(x) $という記号で表す。
$ n $が負の場合や整数でない場合には無限級数の形の解を持つが、
物理的な条件が合わないことが多いので物理学者にとってはあまり関心がないのである。
それについては後で話そう。

<P>

　(1) 式をほんの少し拡張した次のような微分方程式も有名で、「\red{ラゲールの陪微分方程式}」と呼ぶ。

<tex>
x \, y'' \ +\ (k+1-x) \, y' \ +\ (n-k) \, y \ =\ 0 \tag{2}
</tex>

　こちらは$ n $と$ k $が整数で、$ n \geqq k \geqq 0 $という条件を満たすときに有限次の多項式の形の解を持つことが分かっている。
それを「\red{ラゲールの陪多項式}」と呼び、$ L_n^k(x) $という記号で表す。

<P>

　「陪」は「倍」という字と間違える可能性があるので注意が必要である。
この「陪」は「付随する」というような意味である。
英語では associated であって、「ラゲールの随伴多項式」と訳されていることもある。
本当に「関連して出てくる別の形の式」というくらいの軽い意味で使われていて、
ただの多項式と陪多項式との関係に数学的な定義があるわけではなさそうである。

<P>

\note{　(2) 式を「ラゲールの陪微分方程式」と呼んでいる事例が教科書でもほとんど見つからなくて不安だったのだが、
無理やり検索したらごく少数だけ使用している人たちがいるのが見つかったのでこの記事でもそのように言い切ってしまうことにした。
「ルジャンドルの陪微分方程式」というものもあるのだから、この呼び方で問題ないとは思う。
人々の関心は条件付きの解である「ラゲールの陪多項式」の方に集中していて、
「ラゲールの陪微分方程式」の方を呼ぶ必要があまりないのかもしれない。}


% =======================================================================

\section{陪多項式との関係}

　まずは (1) 式と (2) 式の関係を話しておこう。
(1) 式の全体を$ x $で 1 回だけ微分してやると次のようになる。

<tex>
&\big[ x \, y''' + y'' \big] \ +\ \big[ (1-x) y'' - y' \big] \ +\ n \, y' \ =\ 0 \\
\therefore\ &x \, y''' \ +\ (2-x) y'' \ +\ (n-1) \, y' \ =\ 0 \tag{3}
</tex>

　1 回やれば変化のパターンが読めると思うのだが、念の為にさらにもう一度微分すると次のようになる。

<tex>
x \, y'''' \ +\ (3-x) y''' \ +\ (n-2) \, y'' \ =\ 0 \tag{4}
</tex>

　どういう変化が起きるか、お分かり頂けただろうか？
この調子で全部で$ k $回微分すれば (2) 式とそっくりな形になる。
ただし関数$ y(x) $が$ k $回多く微分されているという点だけが違う。
つまり、(1) 式の解$ y(x) $を$ k $回微分したものが (2) 式の解になっているということを意味している。

<tex>
L_n^k(x) \ =\ \dif{^k}{x^k} L_n(x) \tag{5}
</tex>

　何とかして (1) 式の解を求めてやってからそれを$ k $回微分してやれば (2) 式の解が得られるのである。
いや、何とかして (2) 式の解を求めてやってから$ k $に 0 を代入して (1) 式の解を求めることもできそうだ。
一体どちらが楽なのだろう？

% =======================================================================

\section{ソニンの多項式}

　実は (1) 式や (2) 式に良く似た次のような微分方程式もある。

<tex>
x \, y'' \ +\ (k+1-x) \, y' \ +\ n \, y \ =\ 0 \tag{6}
</tex>

　$ n $や$ k $は非負整数である。
この式を満たす関数$ y(x) $のことを「\red{ソニンの多項式}」と呼ぶのだが、
困ったことにこちらを「\red{ラゲールの陪多項式}」と呼び、$ L_n^k(x) $という記号で表すという流儀が存在しているのだ。
紛らわしい！

<P>

　例えば<a href="https://ja.wikipedia.org/wiki/\%E3\%83\%A9\%E3\%82\%B2\%E3\%83\%BC\%E3\%83\%AB\%E3\%81\%AE\%E9\%99\%AA\%E5\%A4\%9A\%E9\%A0\%85\%E5\%BC\%8F">日本語版の Wikipedia</a> では (2) 式の定義で説明しているが、
<a href="https://en.wikipedia.org/wiki/Laguerre_polynomials">英語版の Wikipedia</a> では
(6) 式を「ラゲールの陪多項式」あるいは「一般化されたラゲールの多項式」として解説している。
他にも、科学計算ソフトウェアの Mathematica や WolframAlpha や SciPy や Matlab で使われる関数がこちらの方程式を使った定義を採用している。

<P>

　おそらくは (2) 式のように数式内の 2 箇所に$ k $が使われているのがスマートではない感じで気に入らなかったりするのだろう。
(2) 式に$ n \geqq k $という条件が付属するのも無駄であって、(6) 式の定義を採用するのならそんなものは必要ないのである。
$ k=0 $のときにラゲールの多項式に一致するというのはどちらも同じである。


\note{　多項式 y を定数倍した ay も同じ微分方程式を満たすので、方程式だけでは多項式の値は一通りには定まらない。
科学計算ソフトで使われる関数がどのような基準で定数を決めて値を返しているのかは確認しておく必要がある。
それについては後の方でもう少し詳しく説明しようと思う。}

　この記事ではソニンの多項式を$ S_n^k(x) $と表すことにしよう。
このようにはっきり記号を分けた方が混乱がなくて済むだろう。
(6) 式の$ n $の部分を$ n-k $に変えたものが (2) 式なので、$ S_{n-k}^k(x) $が (2) 式の解になっていると言える。
つまり次のような関係が成り立つだろう。

<tex>
L_n^k(x) \ =\ S_{n-k}^k(x) \tag{7}
</tex>

　あるいは (2) 式の$ n $のところに$ n+k $を代入すれば (6) 式になるので次のように書いてもいい。

<tex>
S_n^k(x) \ =\ L_{n+k}^k(x) \tag{8}
</tex>

　ただし何らかの定数分だけの違いがある可能性があって、この関係は厳密ではない。
定数の違いは本質ではなくて、どんな定数が付いていようとも微分方程式の解にはなっているのだが、
それぞれの教科書やソフトウェアで多項式について異なる定義がしてある場合にはそれらを換算してやる必要が出てきたりもする。
その定数の値は$ n $や$ k $に依存している可能性もあるから面倒である。

<P>

　もう一つ気を付けておいた方がいいことがある。
　(8) 式の意味を考えると分かることだが、ソニンの多項式は、$ L_n(x) $ではなく$ L_{n+k}(x) $を$ k $階微分したものである。
ソニンの多項式の方が何もかもスマートだというわけではなく、
$ L_n(x) $との関係についてはこちらの方が少し面倒くささが入っていたりするのである。

% =======================================================================

\section{解を求める}

　取っ掛かりとして (1) 式の解を求めてみよう。
解は次のような形に表せると仮定する。

<tex>
y(x) \ =\ \sum_{m=0}^\infty a_m \, x^m \tag{9}
</tex>

　これを (1) 式に代入すると次のようになる。

<tex>
x \sum_{m=2}^\infty a_m m(m-1) x^{m-2} \ +\ (1-x) \sum_{m=1}^\infty a_m m x^{m-1} \ +\ n \sum_{m=0}^\infty a_m x^m \ =\ 0 \tag{10}
</tex>

　展開したりして少し整理してみる。

<tex>
\sum_{m=2}^\infty a_m m(m-1) x^{m-1} \ +\ \sum_{m=1}^\infty a_m m x^{m-1} \ -\ \sum_{m=1}^\infty a_m m x^{m} \ +\ \sum_{m=0}^\infty n \, a_m x^m \ =\ 0 \tag{11}
</tex>

　$ x $の次数の表示を揃えた方がまとめやすいので、和の記号の開始の$ m $の値を調整することで対処する。

<tex>
\sum_{m=1}^\infty a_{m+1} \, (m+1)m x^m \ +\ \sum_{m=0}^\infty a_{m+1} (m+1) x^m \ -\ \sum_{m=1}^\infty a_m m x^{m} \ +\ \sum_{m=0}^\infty n \, a_m x^m \ =\ 0 \tag{12}
</tex>

　$ m=1 $以降の項はひとまとめにできるだろう。
$ m=0 $のところだけは和の記号を使わずに表すことにする。

<tex>
\Big( a\sub{1} + n a\sub{0} \Big) x^0 \ +\ \sum_{m=1}^\infty \Big( a_{m+1} \, (m+1)m \ +\ a_{m+1} (m+1) \ -\ a_m m \ +\ n \, a_m \Big) x^m \ =\ 0 \tag{13}
</tex>

　$ x $の各次数ごとの係数が 0 になっていなくてはならない。
つまりカッコの中が 0 になっていなくてはならないので、次の関係が成り立つ。

<tex>
a\sub{1} + n a\sub{0} \ =\ 0 \\
a_{m+1} \, (m^2 + 2m + 1) \ +\ a_m \, (n - m) \ =\ 0 \tag{14}
</tex>

　次のように書けば漸化式らしくなるだろう。

<tex>
a\sub{1} \ &=\ - n \, a\sub{0} \\[3pt]
a_{m+1} \ &=\ - \frac{n-m}{(m+1)^2} \, a_m \tag{15}
</tex>

　第 1 の式は、第 2 の式で$ m=0 $とした場合と同じなので、実は第 2 の式だけあれば十分である。

<P>

　$ y(x) $を定数倍したものはどれも解になるのだから最初の値を幾つにすべきかはどうでもいい。
適当に$ a\sub{0} = 1 $から始めてやればいいだろう。
(15) 式を見て分かることだが、$ m = n $となった時点でその次の係数は 0 になり、それ以降の係数はずっと 0 になる。
つまり、この級数は無限には続かずに$ x^n $が最高次となるというわけだ。

<P>

　もしも$ n $が整数でなかったり負の値だったならば、そのような瞬間は訪れず、項は無限に続くことだろう。

% =======================================================================

\section{nは非負整数でなければいけないか}

　この級数が無限に続く場合に何か問題が起こるのかどうかが気になるところだ。
$ m \rightarrow \infty $では (15) 式は次のような形に近付くことになる。

<tex>
a_{m+1} \ &\kinji\ \frac{1}{m} \, a_m \tag{16}
</tex>

　項の符号が毎回入れ替わるということもなくなる。
ダランベールの方法を当てはめてみると収束半径は無限大であり、$ x $にどんな値を入れても発散しないことが分かる。
（ダランベールの判定法は「<a href="./series.html">収束、発散の判定法</a>」という記事の最後の方を参考にしてほしい。）
そしてこの振る舞いは指数関数$ e^x $のテイラー展開とほとんど違いがない。

<tex>
e^x \ =\ \sum_{m=0}^\infty \frac{1}{m!} x^m \ =\ 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \cdots \tag{17}
</tex>

　指数関数の場合は$ a_{m+1} = a_m/(m+1) $だが、
$ m $が大きくなるほど (16) 式との違いはほとんど無視できるほどになっていく。

<P>

　\red{何も問題はない！}

<P>

　ただ、物理学に応用するときに指数関数のような振る舞いをする関数は欲しくないことが多いので、
それ以外の振る舞いをする条件として$ n $が非負整数である場合に限定して考えるのである。
だから「ラゲールの微分方程式」や「ラゲールの陪微分方程式」そのものに直接取り組むことを避けて、
「ラゲールの多項式」や「ラゲールの陪多項式」という言葉をいきなり持ち出してきたりするのである。

\note{<b>豆知識：</b>　$ n $が非負整数でない場合の解を「ラゲール関数」と呼ぶようである。}


% =======================================================================

\section{解の具体的な形}

　解がどんな形になるかを具体的に見てみたいだろう。
ところが$ a\sub{0} = 1 $から始めるとちょっとした問題が起こる。
$ a\sub{1} $は絶対値が必ず 1 より大きくなるが、(15) 式を見ても分かるように、
分母が大きくなり続け、分子が小さくなり続けるので、最高次の係数が 1 よりかなり小さな値になってしまう場合が多いのである。
係数が分数やら小数やらで表されるのは見た目があまりきれいではない。

<P>

　それでもとりあえずやってみよう。
一般項を求めるのは全く難しくはない。
値を一つずつ変化させながら掛け合わせていくことで次の項が求まるのだから階乗を使って表せるだろう。

<tex>
a_m \ =\ (-1)^m \, \frac{n\,!}{(n-m)!} \frac{1}{(m\,!)^2} \tag{18}
</tex>

　なぜこうなるのかが理解できなければ、具体的な数字を使って一つ一つ掛け合わせていくのを試してみることをお勧めする。
私もそうしてみた。

<P>

　この式を見ると組み合わせの数の公式と同じ$ _n\mathrm{C}_m = n\,!/(m!\,(n-m)!) $という形が含まれている。
とは言っても、今回は組み合わせとは関係ない話なので、同じ内容を表す二項係数の記号で表すのが好まれたりする。
これを使うと (18) 式はかなりシンプルに書き直せる。

<tex>
a_m \ =\ (-1)^m \, \binom{n}{m} \frac{1}{m\,!} \tag{19}
</tex>

　これを使って「ラゲールの多項式」は次のように表すことが出来る。

<tex>
L_n(x) \ =\ \sum_{m=0}^n (-1)^m \, \binom{n}{m} \frac{1}{m\,!} \, x^m \tag{20}
</tex>

　\red{この式は定義ではないことに気を付けてほしい。}
これを定数倍したものもラゲールの微分方程式を満たすのだから、
あちこちの文献やソフトウェアによってそれぞれの立場で都合の良い独自の調整が入っていたりする。
先ほども書いたように、この (20) 式を使うと最高次の係数は 1 よりはるかに小さな値になってしまう。
どれくらい小さいだろうか？
(19) 式に$ m=n $を代入すると最高次の係数は$ a_n = (-1)^n /n\,! $だと分かる。
ということは、(20) 式の全体に$ (-1)^n \, n\,! $を掛けてやれば、最高次の係数が 1 に統一されて、
具体的に書き並べてみたときの見た目が気持ちよくなるだろう。
次のような具合だ。

<tex>
L_0(x)\ &=\ 1 \\
L_1(x)\ &=\ x - 1 \\
L_2(x)\ &=\ x^2 - 4x + 2 \\
L_3(x)\ &=\ x^3 - 9x^2 + 18x - 6 \tag{21} \\
L_4(x)\ &=\ x^4 - 16x^3 + 72x^2 - 96x + 24 \\
L_5(x)\ &=\ x^5 - 25x^4 + 200x^3 - 600x^2 + 600x - 120 \\
&\vdots
</tex>

　全ての係数が整数で表されていることも嬉しい。
そうなる理由は明らかだろう。
(20) 式の$ m\,! $の部分と後から掛けた$ n\,! $の部分がきれいに約分されるからである。
この具体例も一例であって定義ではないので気を付けてほしい。


% =======================================================================

\section{ロドリグの公式}

　$ L_n(x) $を表す方法は (20) 式のように和の記号を使う方法だけではない。
もっとシンプルに一つの式で表せる式があって「\red{ロドリグの公式}」と呼ばれている。
ロドリグの公式は<a href="./differential18.html">エルミート多項式</a>にも
<a href="./differential19.html">ルジャンドル多項式</a>にもそれぞれ別の形のものが出てきたのだった。
今回は次のような形をしている。

<tex>
L_n(x) \ =\ e^x \dif{^n}{x^n}(x^n\,e^{-x}) \tag{22}
</tex>

　これを計算してやると次のようになって (21) 式とは少し違っている。

<tex>
L_0(x)\ &=\ 1 \\
L_1(x)\ &=\ - x + 1 \\
L_2(x)\ &=\ x^2 - 4x + 2 \tag{23} \\
L_3(x)\ &=\ - x^3 + 9x^2 - 18x + 6 \\
&\vdots
</tex>

　これは符号が違うだけのことだから気にする必要もない。
(22) 式があまりにシンプルなので、\red{これを定義として採用している文献は多い}ようである。

<P>

　さて、ラゲールの陪多項式$ L_n^k(x) $はラゲールの多項式$ L_n(x) $を$ k $回微分したものだったので、
次のように書いておけばいい。

<tex>
L_n^k(x) \ =\ \dif{^k}{x^k} \left[ e^x \dif{^n}{x^n}(x^n\,e^{-x}) \right] \tag{24}
</tex>

　こちらについても、これを定数倍したものを定義として採用しても何ら問題はない。
せっかくシンプルなのだからあまり付け足したくない気はするが、それぞれの都合というものがあるから好きにすればいい。



% =======================================================================

\section{科学計算ソフトの定義}

　先ほど、代表的な科学計算ソフトでのラゲールの陪多項式の定義が
この記事で説明している流儀とは少し違うものが使われているという話をした。
ところが、陪多項式$ L_n^k(x) $だけではなくラゲールの多項式$ L_n(x) $の方の定義も少し変わった形になっているようである。
ちょっと説明しておこう。

<P>

　と思ったが、改めて調べてみると <a href="https://mathworld.wolfram.com/LaguerrePolynomial.html">Wolfram Alpha</a> では (20) 式をそのまま採用しているようである。
つまり必ず$ a\sub{0} = 1 $となるように決めている。
そして (20) 式と一致させるために、ロドリグの公式の方の係数を変更して次のように表記している。

<tex>
L_n(x) \ =\ \frac{e^x}{n\,!} \dif{^n}{x^n}(x^n\,e^{-x}) \tag{25}
</tex>

　Mathematica と Wolfram Alpha は開発元が同じなのでおそらく同じ仕様だろう。
<a href="https://www.mathworks.com/help/symbolic/sym.laguerrel.html">Matlab</a> も <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.laguerre.html">SciPy</a> も同じ仕様のようだった。
これらのリンク先にある仕様説明ページを見ただけではどうにも分かりにくい。
というのも、どうやら「陪多項式$ L_n^k(x) $で$ k=0 $としたものを$ L_n(x) $とする」という方針で決めているようであって、
陪多項式の仕様説明の方を読んでみないと分からない形になっているからである。

<P>

　では「ラゲールの陪多項式」の定義を眺めてみよう。
興味深いことに<a href="https://reference.wolfram.com/language/ref/LaguerreL.html">Wolfram社による解説ページ</a>で「詳細」のところを開いて読むと、
「ここでの定義は、ソニン(Sonine)の多項式とよばれるものと同じである」と断言してくれている。
ソニンの多項式の存在を分かった上でわざと名前を被せてきているのだな！

\note{　なぜこの流儀を採用しているのかについては過去の数学論文の歴史的経緯というものもあるのだろう。私はそこまで追う気にはなれなかった。}

　さて、<a href="https://mathworld.wolfram.com/AssociatedLaguerrePolynomial.html">Wolfram Alpha からリンクされている別の解説ページ</a>では次のような式が載っている。
（ただし今回の私の記事では$ L_n^k(x) $と書くと紛らわしいので$ S_n^k(x) $に書き換えて転載することにする。）

<tex>
S_n^k(x) \ =\ (-1)^k \dif{^k}{x^k} L_{n+k}(x) \tag{26}
</tex>

　「ソニンの多項式は$ L_{n+k}(x) $を$ k $階微分したものだ」という部分は既に説明した通りだが、$ (-1)^k $が余分に付いている。
これが付くことの意味を考えてみたが、どうやら定数項が常に正になるように調整しているらしい。
つまり、多項式をグラフで表したときに$ x=0 $での値が必ず正になるようにしたいという美意識によるのではないだろうか。

<P>

　他にも幾つかの式が載っているのでそれについても確かめておこう。
次のような式が載っている。

<tex>
S_n^k(x) \ =\ \sum_{m=0}^n (-1)^m \frac{(n+k)!}{(n-m)! \, (k+m)! \, m\,!} \, x^m \tag{27}
</tex>

　科学計算ソフトのほとんどは$ L_n(x) $は (20) 式で定義されているのだった。
それを (26) 式に代入して計算してやるとちゃんとこの形になることが分かる。

<P>

　もう一つ分からないのが次の式だ。

<tex>
S_n^k(x) \ =\ \frac{e^x \, x^{-k}}{n\,!} \, \dif{^n}{x^n}(x^{n+k} \, e^{-x}) \tag{28}
</tex>

　(25) 式を (26) 式に代入してこの形にならないといけないのだが、ずいぶんとあっさりした形に変わっていて計算過程がよく分からない。
(24) 式にも似ていなくて、こんな形になる気が全然しないのである。
私自身がこれでかなり悩んだので、他の人が同じくらい長い時間悩まなくても済むようにここでやっておこう。

<P>

　関数の積を$ k $階微分したものが二項係数を使って表せるという「<a href="./gen_leibniz.html">一般化ライプニッツ則</a>」を知らなかったのが致命的だった。
しかしそれだけ知っていれば解けるというものでもなかった。
コツが幾つかある。
先に$ L_{n+k} $の中の$ n+k $階微分を計算してしまって$ e^{-x} $を一旦式から消してしまうことが重要である。
目的の式に近付こうとして慌てて$ e^{x} $をくくり出すことを考えない方がいい。
$ e^{-x} $が消えれば$ k $階微分を楽に実行できて式が複雑にならないで済む。
注意点はまだある。
$ n+k $階微分を一般化ライプニッツ則で書き換えるときにどちらを先に微分する形で書くかという二通りの選択肢がある。
ここで選択を間違えると行き詰まる可能性が高い。
最後の方は、欲しい結論の方から逆にたどって無理やり合わせた。
そこでもまたライプニッツ則を使ったのである。

<tex>
S_n^k(x) \ &=\ (-1)^k \dif{^k}{x^k} L_{n+k}(x) \\
&=\ (-1)^k \dif{^k}{x^k} \left( \frac{e^x}{(n+k)!} \dif{^{n+k}}{x^{n+k}}(x^{n+k}\,e^{-x}) \right) \\
&=\ \frac{(-1)^k}{(n+k)!} \dif{^k}{x^k} \left( e^x \dif{^{n+k}}{x^{n+k}}(x^{n+k}\,e^{-x}) \right) \\
&=\ \frac{(-1)^k}{(n+k)!} \dif{^k}{x^k} \left( e^x \sum_{m=0}^{n+k} \binom{n+k}{m} \bigg[ \dif{^{m}}{x^{m}} x^{n+k} \bigg] \bigg[ \dif{^{n+k-m}}{x^{n+k-m}} e^{-x} \bigg] \right) \\
&=\ \frac{(-1)^k}{(n+k)!} \dif{^k}{x^k} \left( e^x \sum_{m=0}^{n+k} \binom{n+k}{m} \bigg[ \frac{(n+k)!}{(n+k-m)!} x^{n+k-m} \bigg] \bigg[ (-1)^{n+k-m} \, e^{-x} \bigg] \right) \\
&=\ \dif{^k}{x^k} \left( \sum_{m=0}^{n+k} \binom{n+k}{m} \frac{1}{(n+k-m)!} x^{n+k-m} \, (-1)^{n-m} \right) \\
&=\ \sum_{m=0}^{n+k} \binom{n+k}{m} \frac{1}{(n+k-m)!} \left( \dif{^k}{x^k} x^{n+k-m} \right) \, (-1)^{n-m} \\
&=\ \sum_{m=0}^{n} \binom{n+k}{m} \frac{1}{(n+k-m)!} \left( \frac{(n+k-m)!}{(n-m)!} x^{n-m} \right) \, (-1)^{n-m} \\
&=\ \sum_{m=0}^{n} \binom{n+k}{m} \frac{1}{(n-m)!} x^{n-m} \, (-1)^{n-m} \\
&=\ \frac{e^x x^{-k}}{n\,!} \sum_{m=0}^{n} \left( \frac{(n+k)!}{(n+k-m)!\,m\,!} \right) \frac{n\,!}{(n-m)!} x^{n+k-m} \, (-1)^{n-m} e^{-x} \\
&=\ \frac{e^x x^{-k}}{n\,!} \sum_{m=0}^{n} \left( \frac{n\,!}{(n-m)!\,m\,!} \right) \left(\frac{(n+k)!}{(n+k-m)!} x^{n+k-m} \right) \left( (-1)^{n-m} e^{-x} \right) \\
&=\ \frac{e^x x^{-k}}{n\,!} \sum_{m=0}^{n} \binom{n}{m} \left(\dif{^m}{x^m} x^{n+k} \right) \left( \dif{^{n-m}}{x^{n-m}} e^{-x} \right) \\
&=\ \frac{e^x x^{-k}}{n\,!} \dif{^n}{x^n} \left( x^{n+k} \, e^{-x} \right) \tag{29}
</tex>

　こうして (28) 式も (26) 式と矛盾しないことが確かめられた。

<P>

　さて、<a href="https://jp.mathworks.com/help/symbolic/sym.laguerrel.html#buedpjn-6">Matlab</a> や <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.genlaguerre.html">SciPy</a> はどうだろうか？
ちょっと分かりにくいのだが、これらはどちらも超幾何関数$ \sub{1}F\sub{1}(a;b;x) $というものを使って次のように定義しているのである。

<tex>
S_n^k(x) \ =\ \binom{n+k}{n} \, {\sub{1}F\sub{1}}(-n;k+1;x) \tag{30}
</tex>

　超幾何関数とは何だろうか？
どうやら、特殊関数などを表す色々な微分方程式の解をまとめて表すことのできる便利な形式の関数のようである。
超幾何関数にもあれこれ種類があるようだが、
ここで使われている超幾何関数の定義は<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.hyp1f1.html">こちらのSciPyのリファレンスページ</a>で次のように定義されている。

<tex>
\sub{1}F\sub{1}(a;b;x) \ =\ \sum_{m=0}^\infty \frac{(a)_m}{(b)_m \ m\,!} x^m \tag{31}
</tex>

　この式の中にある$ (a)_m $や$ (b)_m $は「ポッホハマー記号」と呼ばれるもので、
<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.special.poch.html">SciPyのページ</a>にて次のように定義されている。

<tex>
(z)_m \ =\ \frac{\Gamma(z+m)}{\Gamma(z)} \tag{32}
</tex>

　この$ \Gamma(z) $というのは<a href="../statistic/gamma_func.html">ガンマ関数</a>と呼ばれるもので、階乗を拡張したものである。
変数が正の整数の時には$ \Gamma(n) = (n-1)! $という関係になっている。
ああ、ひどいたらい回しだ！
これで解読に必要な情報は全部揃っただろうか？
いや、(30) 式の中で$ -n $というものを使っているせいで、これをそのまま代入しようとすると「負の階乗」が出てきてしまう。
そんなものは定義されていないのである。
ではどうしたらいいだろうか。
実は (32) 式の$ z $の部分が負の値の時には次の関係が成り立つことがガンマ関数の性質から言えるのである。

<tex>
(-z)_m \ =\ (-1)^m (z-m+1)_m \tag{33}
</tex>

　このことを考慮して非負整数$ n $について表すと、次の関係が成り立っていることになる。

<tex>
(-n)_m \ &=\ (-1)^m \frac{\Gamma((n-m+1)+m)}{\Gamma(n-m+1)} \\
&=\ (-1)^m \frac{\Gamma(n+1)}{\Gamma(n-m+1)} \\
&=\ (-1)^m \frac{n\,!}{(n-m)!} \tag{34} \\[10pt]
(n)_m \ &=\ \frac{(n+m-1)!}{(n-1)!} \tag{35}
</tex>

　これらを使って (30) 式から始まる情報をまとめると次のようになる。

<tex>
S_n^k(x) \ &=\ \binom{n+k}{n} \, {\sub{1}F\sub{1}}(-n;k+1;x) \\
&=\ \binom{n+k}{n} \sum_{m=0}^\infty \frac{(-n)_m}{(k+1)_m \ m\,!} x^m \\
&=\ \frac{(n+k)!}{k\,! \ n\,!} \sum_{m=0}^n (-1)^m \frac{n\,!}{(n-m)!} \frac{1}{\frac{(k+m)!}{k\,!}} \frac{1}{m\,!} x^m \\
&=\ \sum_{m=0}^n (-1)^m \frac{(n+k)!}{(n-m)! \, (k+m)! \, m\,!} x^m \tag{36}
</tex>

　途中で和の範囲が変わっているのは、ガンマ関数が 0 以下の整数のところで毎回無限大に発散する性質があるためである。
分母にある$ (n-m)! $に該当する部分が無限大になるので、$ m>n $になる項は消えてしまうのである。

<P>

　この結果は (27) 式と同じであり、ひと安心だ。
ここまでに例を挙げたどの科学計算ソフトもラゲールの陪多項式に関して同じ定義を採用していることが分かった。

% =======================================================================

\section{ロドリグの公式の証明}

　ロドリグの公式が成り立つ理由は説明しないつもりだったのだが、
 (29) 式のような計算をあれこれ試しているうちに、
それくらいは簡単に出来るのではないかと思えるようになってしまった。
実際とても簡単だった。

<P>

　例えば (25) 式から始めて計算してやると次のようにして (20) 式と同じものが出来上がる。

<tex>
L_n(x) \ &=\ \frac{e^x}{n\,!} \dif{^n}{x^n}(x^n\,e^{-x}) \\
&=\ \frac{e^x}{n\,!} \ \sum_{m=0}^n \binom{n}{m} \dif{^m}{x^m} e^{-x} \dif{^{n-m}}{x^{n-m}} x^n \\
&=\ \frac{e^x}{n\,!} \ \sum_{m=0}^n \binom{n}{m} (-1)^m \, e^{-x} \ \frac{n\,!}{m\,!} x^{m} \\
&=\ \sum_{m=0}^n (-1)^m \binom{n}{m} \frac{1}{m\,!} x^m \tag{37}
</tex>


% =======================================================================

\section{一旦休憩}

　今回は母関数表示についても書いておきたかったのだが、話が長くなってきてしまったのでこれくらいにしておこう。

<P>

　ほとんどの人にとっては必要ないとは思うが、
ラゲールの多項式やラゲールの陪多項式を含む関数の規格化を計算する際に母関数が必要になるようである。
今回の記事はその計算を説明するための参考記事として書き始めたのである。

<P>

　さらには母関数を経由することでロドリグの公式をもっと自然に導くことが出来るようである。
今回は話の流れで直接的に証明してしまったが、それについてもまとめてみたい。
こんな妙な式を一体どうやって思い付くことができたんだ？ と不思議に思っていた。
その疑問が解けるかもしれない。

<P>

　近いうちに続きの記事を書く予定である。


